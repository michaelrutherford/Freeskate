(defun addfn (f s)
  (if (and (and (and (integerp f) (integerp s)) (<= (+ f s) 999999999)) (>= (+ f s) -999999999)) (+ f s) "ERROR"))
(defun subfn (f s)
  (if (and (and (and (integerp f) (integerp s)) (<= (- f s) 999999999)) (>= (- f s) -999999999)) (- f s) "ERROR"))
(defun mltfn (f s)
  (if (and (and (and (integerp f) (integerp s)) (<= (* f s) 999999999)) (>= (* f s) -999999999)) (* f s) "ERROR"))
(defun dvnfn (f s)
  (if (and (and (and (integerp f) (integerp s)) (<= (/ f s) 999999999)) (>= (/ f s) -999999999)) (/ f s) "ERROR"))
(defun expfn (f s)
  (if (and (and (and (integerp f) (integerp s)) (<= (expt f s) 999999999)) (>= (expt f s) -999999999)) (expt f s) "ERROR"))
(defun sqrfn (f)
  (if (and (and (integerp f) (<= (sqrt f) 999999999)) (>= (sqrt f) -999999999)) (sqrt f) "ERROR"))
(defun fctfn (f)
  (if (and (and (and (and (>= 1 f) (integerp f)) (not (floatp f))) (<= f 999999999)) (>= f -999999999)) 1 (* f (fctfn (- f 1)))))
(defun confn (f b)
  (cond ((and (and (eq b 2) (numberp f)) (not (floatp f))) (format NIL "~B" f))
        ((and (and (eq b 8) (numberp f)) (not (floatp f))) (format NIL "~O" f))
        ((and (and (eq b 10) (numberp f)) (not (floatp f))) (format NIL "~d" f))
        ((and (and (eq b 16) (numberp f)) (not (floatp f))) (format NIL "~X" f))
        ("ERROR: INVALID NUMBER OR BASE")))
